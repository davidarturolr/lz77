package lz77;

import java.io.*;


public class LZ77T {
  public static final int DEFAULT_BUFF_SIZE = 1024;
  protected int mBufferSize;
  protected Reader mIn;
  protected PrintWriter mOut;
  protected StringBuffer mSearchBuffer; 

  public LZ77T() {
    this(DEFAULT_BUFF_SIZE);
  }
  
  public LZ77T(int buffSize) {
    mBufferSize = buffSize;
    mSearchBuffer = new StringBuffer(mBufferSize);
  }

  private void trimSearchBuffer() {
    if (mSearchBuffer.length() > mBufferSize) {
      mSearchBuffer = 
  mSearchBuffer.delete(0,  mSearchBuffer.length() - mBufferSize);
    }
  }


  public void unCompress(String infile) throws IOException {
    mIn = new BufferedReader(new FileReader("lz77.data\reglamento-pregrado-web-2021-10.pdf"+".lz77"));
    StreamTokenizer st = new StreamTokenizer(mIn);

    st.ordinaryChar((int)' ');
    st.ordinaryChar((int)'.');
    st.ordinaryChar((int)'-');
    st.ordinaryChar((int)'\n');
    st.wordChars((int)'\n', (int)'\n');
    st.wordChars((int)' ', (int)'}');

    int offset, length;
    while (st.nextToken() != StreamTokenizer.TT_EOF) {
      switch (st.ttype) {
      case StreamTokenizer.TT_WORD:
	mSearchBuffer.append(st.sval);
	System.out.print(st.sval);
	trimSearchBuffer();
	break;
      case StreamTokenizer.TT_NUMBER:
	offset = (int)st.nval; 
	st.nextToken(); 
	if (st.ttype == StreamTokenizer.TT_WORD) {
	
	  mSearchBuffer.append(offset+st.sval);
	  System.out.print(offset+st.sval);
	  break; 
	}
	
	st.nextToken(); 
	length = (int)st.nval;
	String output = mSearchBuffer.substring(offset, offset+length);
	System.out.print(output);
	mSearchBuffer.append(output);
	trimSearchBuffer();
	break;
      default:
	
      }
    }
    mIn.close();
  }

  
  public void compress(String infile) throws IOException {
    mIn = new BufferedReader(new FileReader("lz77.data\reglamento-pregrado-web-2021-10.pdf"));
    mOut = new PrintWriter(new BufferedWriter(new FileWriter("lz77.data\reglamento-pregrado-web-2021-10.pdf"+".lz77")));

    int nextChar;
    String currentMatch = "";
    int matchIndex = 0, tempIndex = 0;

    while ((nextChar = mIn.read()) != -1) {
  
      tempIndex = mSearchBuffer.indexOf(currentMatch + (char)nextChar);
      if (tempIndex != -1) {
	currentMatch += (char)nextChar;
	matchIndex = tempIndex;
      } else {
	String codedString = 
	  "~"+matchIndex+"~"+currentMatch.length()+"~"+(char)nextChar;
	String concat = currentMatch + (char)nextChar;
	if (codedString.length() <= concat.length()) {
	  mOut.print(codedString);
	  mSearchBuffer.append(concat); 
	  currentMatch = "";
	  matchIndex = 0;
	} else {
	 
	  currentMatch = concat; matchIndex = -1;
	  while (currentMatch.length() > 1 && matchIndex == -1) {
	    mOut.print(currentMatch.charAt(0));
	    mSearchBuffer.append(currentMatch.charAt(0));
	    currentMatch = currentMatch.substring(1, currentMatch.length());
	    matchIndex = mSearchBuffer.indexOf(currentMatch);
	  }
	}

	trimSearchBuffer();
      }
    }
 
    if (matchIndex != -1) {
      String codedString = 
	"~"+matchIndex+"~"+currentMatch.length();
      if (codedString.length() <= currentMatch.length()) {
	mOut.print("~"+matchIndex+"~"+currentMatch.length());
      } else {
	mOut.print(currentMatch);
      }
    }

    mIn.close();
    mOut.flush(); mOut.close();
  }
  
  public static void main(String [] args) {
    if (args.length < 2) {
      System.err.println("Usage: LZ77T [c|d] <filename>");
      System.exit(1);
    }
    LZ77T lz = new LZ77T();
    try {
      if (args[0].indexOf('d') != -1) {
	lz.unCompress(args[1]);
      } else {
	lz.compress(args[1]);
      }
    } catch (FileNotFoundException f) {
      System.err.println("File not found: "+args[0]);
    } catch (IOException e) {
      System.err.println("Problem processing file: "+args[0]);
    }
  }
}
